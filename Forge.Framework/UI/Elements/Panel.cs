#region

using Forge.Framework.Draw;
using Forge.Framework.Resources;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Rectangle = MonoGameUtility.Rectangle;

#endregion

namespace Forge.Framework.UI.Elements{
    public class Panel : DraggableCollection{
        readonly int _backgroundInset = 1;
        readonly string _bgMaterial = "Materials/TextBoxBG";
        readonly string _borderMaterial = "Materials/TextBoxBorder";
        readonly int _borderThickness = 2;
        readonly string _cornerMaterial = "Materials/TextBoxCorner";
        readonly int _cornerSize = 2;


        public Panel(UIElementCollection parent, FrameStrata.Level depth, Rectangle boundingBox, string template = "UiTemplates/Panel.json")
            : base(parent, depth, boundingBox, "Panel"){
            #region load template

            var jobj = Resource.LoadJObject(template);

            _borderMaterial = jobj["BorderMaterial"].ToObject<string>();
            _bgMaterial = jobj["BackgroundMaterial"].ToObject<string>();
            _cornerMaterial = jobj["CornerMaterial"].ToObject<string>();
            _backgroundInset = jobj["BackgroundInset"].ToObject<int>();
            _borderThickness = jobj["BorderThickness"].ToObject<int>();
            _cornerSize = jobj["CornerSize"].ToObject<int>();

            #endregion

            #region set up sprites/spritedata

            var bg = new Sprite2D
                (
                GenerateBgSprite(boundingBox.Width, boundingBox.Height),
                boundingBox.X,
                boundingBox.Y,
                boundingBox.Width,
                boundingBox.Height,
                this.FrameStrata,
                FrameStrata.Level.Background
                );

            AddElement(bg);

            #endregion
        }

        /// <summary>
        /// Generates the background of the inputbox. optimize: cache the sprites generated by this method in a static dict
        /// </summary>
        /// <param name="boxWidth"></param>
        /// <param name="boxHeight"></param>
        /// <returns></returns>
        Texture2D GenerateBgSprite(int boxWidth, int boxHeight){
            //reflect border material
            var borderTexture = Resource.LoadContent<Texture2D>(_borderMaterial);
            RenderTarget2D reflectedBorder = new RenderTarget2D(Resource.Device, borderTexture.Height, borderTexture.Width);
            {
                var sb = new SpriteBatch(Resource.Device);
                Resource.Device.SetRenderTarget(reflectedBorder);
                Resource.Device.Clear(Color.Transparent);
                sb.Begin(SpriteSortMode.Texture, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone);

                sb.Draw
                    (
                        borderTexture,
                        new Vector2(borderTexture.Width/4f, borderTexture.Height/2f),
                        new Rectangle(0, 0, borderTexture.Width, borderTexture.Height),
                        Color.White,
                        MathHelper.PiOver2,
                        new Vector2(borderTexture.Width/4f, borderTexture.Height/2f),
                        1,
                        SpriteEffects.None,
                        0
                    );
                sb.End();
                Resource.Device.SetRenderTarget(null);
            }

            //now construct background sprite
            var bgBatch = new SpriteBatch(Resource.Device);
            var bgTexture = new RenderTarget2D(Resource.Device, boxWidth, boxHeight);
            Resource.Device.SetRenderTarget(bgTexture);
            Resource.Device.Clear(Color.Transparent);
            bgBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);

            bgBatch.Draw
                (
                    Resource.LoadContent<Texture2D>(_bgMaterial),
                    new Rectangle
                        (
                        _backgroundInset,
                        _backgroundInset,
                        boxWidth - _backgroundInset*2,
                        boxHeight - _backgroundInset*2
                        ),
                    Color.White
                );

            //top border
            bgBatch.Draw
                (
                    reflectedBorder,
                    new Rectangle
                        (
                        _cornerSize,
                        0,
                        boxWidth - _cornerSize*2,
                        _borderThickness
                        ),
                    Color.White
                );

            //left  border
            bgBatch.Draw
                (
                    Resource.LoadContent<Texture2D>(_borderMaterial),
                    new Rectangle
                        (
                        0,
                        _cornerSize,
                        _borderThickness,
                        boxHeight - _cornerSize*2
                        ),
                    Color.White
                );

            //right border
            bgBatch.Draw
                (
                    Resource.LoadContent<Texture2D>(_borderMaterial),
                    new Rectangle
                        (
                        boxWidth - _borderThickness,
                        _cornerSize,
                        _borderThickness,
                        boxHeight - _cornerSize*2
                        ),
                    null,
                    Color.White,
                    0,
                    Vector2.Zero,
                    SpriteEffects.FlipHorizontally,
                    1
                );

            //bottom border
            bgBatch.Draw
                (
                    reflectedBorder,
                    new Rectangle
                        (
                        _cornerSize,
                        boxHeight - _borderThickness,
                        boxWidth - _cornerSize*2,
                        _borderThickness
                        ),
                    null,
                    Color.White,
                    0,
                    Vector2.Zero,
                    SpriteEffects.FlipVertically,
                    1
                );


            //topleft corner
            bgBatch.Draw
                (
                    Resource.LoadContent<Texture2D>(_cornerMaterial),
                    new Rectangle
                        (
                        0,
                        0,
                        _cornerSize,
                        _cornerSize
                        ),
                    Color.White
                );

            //topright corner
            bgBatch.Draw
                (
                    Resource.LoadContent<Texture2D>(_cornerMaterial),
                    new Rectangle
                        (
                        boxWidth - _cornerSize,
                        0,
                        _cornerSize,
                        _cornerSize
                        ),
                    null,
                    Color.White,
                    0,
                    Vector2.Zero,
                    SpriteEffects.FlipVertically,
                    1
                );

            //bottomleft corner
            bgBatch.Draw
                (
                    Resource.LoadContent<Texture2D>(_cornerMaterial),
                    new Rectangle
                        (
                        0,
                        boxHeight - _cornerSize,
                        _cornerSize,
                        _cornerSize
                        ),
                    null,
                    Color.White,
                    0,
                    Vector2.Zero,
                    SpriteEffects.FlipHorizontally,
                    1
                );

            //bottomright corner
            bgBatch.Draw
                (
                    Resource.LoadContent<Texture2D>(_cornerMaterial),
                    new Rectangle
                        (
                        boxWidth - _cornerSize,
                        boxHeight - _cornerSize,
                        _cornerSize,
                        _cornerSize
                        ),
                    null,
                    Color.White,
                    0,
                    Vector2.Zero,
                    SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically,
                    1
                );

            bgBatch.End();
            Resource.Device.SetRenderTarget(null);
            return bgTexture;
        }
    }
}